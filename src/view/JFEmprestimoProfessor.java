/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.BdProfessor;
import utils.BdEmprestimoProfessor;
import utils.BdLivro;
import model.Professor;
import model.Emprestimo;
import model.Livro;


/**
 *
 * @author paulojp
 */
public class JFEmprestimoProfessor extends javax.swing.JFrame {  
   
    private JFPrincipal telaPrincipal;
    boolean verifica = false;
    
    /**
     * Creates new form Professor
     */
    public JFEmprestimoProfessor() {
        initComponents();
        verifica = true;
        // Desabilita os campos ao iniciar a janela
        desabilitaCamposEmprestimo();   
        
        // Mostra a data atual como data do empréstimo        
        dataEmprestimo();
        // Mostra a data atual como data do empréstimo        
        mostraDataDevolucao();
    }
    
    // Construtor que recebe a instância da tela principal
    JFEmprestimoProfessor(JFPrincipal telaPrincipal) {
        
        this();
        this.telaPrincipal = telaPrincipal;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGPesquisa = new javax.swing.ButtonGroup();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jT0IdEmprestimo = new javax.swing.JTextField();
        jT1IdProfessor = new javax.swing.JTextField();
        jT2IdLivro = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jT4DataDevolucao = new javax.swing.JTextField();
        jT3DataEmprestimo = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jBCadastrar = new javax.swing.JButton();
        jBDevolver = new javax.swing.JButton();
        jBCadastrar1 = new javax.swing.JButton();
        jBSair = new javax.swing.JButton();
        jBExcluir1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTPesquisar = new javax.swing.JTextField();
        jBPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmprestimo = new javax.swing.JTable();
        jRClientes = new javax.swing.JRadioButton();
        jRLivros = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableLivro = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableProfessor = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editar empréstimos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Empréstimos"));

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel1.setText("ID: ");

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel2.setText("ID do professor:");

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel3.setText("Reg. do livro:");

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel4.setText("Data do emprestimo:(d/m/a)");

        jT0IdEmprestimo.setBackground(new java.awt.Color(204, 255, 204));
        jT0IdEmprestimo.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N

        jT1IdProfessor.setBackground(new java.awt.Color(204, 255, 204));
        jT1IdProfessor.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N

        jT2IdLivro.setBackground(new java.awt.Color(204, 255, 204));
        jT2IdLivro.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel5.setText("Data de Devolução: (d/m/a)");

        jT4DataDevolucao.setBackground(new java.awt.Color(204, 255, 204));
        jT4DataDevolucao.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N

        jT3DataEmprestimo.setBackground(new java.awt.Color(204, 255, 204));
        jT3DataEmprestimo.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        jT3DataEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jT3DataEmprestimoActionPerformed(evt);
            }
        });

        jBCadastrar.setBackground(new java.awt.Color(0, 153, 0));
        jBCadastrar.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jBCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        jBCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconEmprestar.png"))); // NOI18N
        jBCadastrar.setText("EMPRESTAR");
        jBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrarActionPerformed(evt);
            }
        });

        jBDevolver.setBackground(new java.awt.Color(0, 153, 0));
        jBDevolver.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jBDevolver.setForeground(new java.awt.Color(255, 255, 255));
        jBDevolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconDevolver.png"))); // NOI18N
        jBDevolver.setText("DEVOLVER");
        jBDevolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBDevolverMouseClicked(evt);
            }
        });
        jBDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDevolverActionPerformed(evt);
            }
        });

        jBCadastrar1.setBackground(new java.awt.Color(0, 153, 0));
        jBCadastrar1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBCadastrar1.setForeground(new java.awt.Color(255, 255, 255));
        jBCadastrar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/piece-of-paper-and-pencil_1.png"))); // NOI18N
        jBCadastrar1.setText("LIMPAR");
        jBCadastrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrar1ActionPerformed(evt);
            }
        });

        jBSair.setBackground(new java.awt.Color(255, 0, 0));
        jBSair.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jBSair.setForeground(new java.awt.Color(255, 255, 255));
        jBSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/sair-menu.png"))); // NOI18N
        jBSair.setText("SAIR");
        jBSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSairActionPerformed(evt);
            }
        });

        jBExcluir1.setBackground(new java.awt.Color(0, 153, 0));
        jBExcluir1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jBExcluir1.setForeground(new java.awt.Color(255, 255, 255));
        jBExcluir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/delete.png"))); // NOI18N
        jBExcluir1.setText("EXCLUIR");
        jBExcluir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExcluir1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(jT0IdEmprestimo))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jT1IdProfessor)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jT2IdLivro)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jT3DataEmprestimo))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jT4DataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBCadastrar1)
                        .addGap(18, 18, 18)
                        .addComponent(jBCadastrar)
                        .addGap(18, 18, 18)
                        .addComponent(jBDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBExcluir1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                        .addComponent(jBSair)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5)))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jT0IdEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jT1IdProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jT2IdLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jT3DataEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jT4DataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBCadastrar1)
                            .addComponent(jBCadastrar)
                            .addComponent(jBDevolver)
                            .addComponent(jBExcluir1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBSair)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBCadastrar, jBDevolver});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jT0IdEmprestimo, jT1IdProfessor, jT2IdLivro, jT3DataEmprestimo, jT4DataDevolucao});

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisar Empréstimos"));

        jTPesquisar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jBPesquisar.setBackground(new java.awt.Color(0, 153, 0));
        jBPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconfinder_search_322497 (1).png"))); // NOI18N
        jBPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisarActionPerformed(evt);
            }
        });

        jTableEmprestimo.setBackground(new java.awt.Color(204, 255, 204));
        jTableEmprestimo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTableEmprestimo.setModel(tmEmprestimo);
        jTableEmprestimo.setRowHeight(25);
        jTableEmprestimo.getTableHeader().setReorderingAllowed(false);
        jTableEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmprestimoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmprestimo);

        jRClientes.setBackground(new java.awt.Color(255, 255, 255));
        bGPesquisa.add(jRClientes);
        jRClientes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRClientes.setText("Professores");

        jRLivros.setBackground(new java.awt.Color(255, 255, 255));
        bGPesquisa.add(jRLivros);
        jRLivros.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRLivros.setText("Livros");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Pesquisar por: ");

        jTableLivro.setAutoCreateRowSorter(true);
        jTableLivro.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTableLivro.setModel(tmLivro);
        jTableLivro.setRowHeight(25);
        jTableLivro.getTableHeader().setReorderingAllowed(false);
        jTableLivro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLivroMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableLivro);

        jTableProfessor.setFont(new java.awt.Font("Tahoma", 0, 18));
        jTableProfessor.setModel(tmProfessor);
        jTableProfessor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableProfessor.setRowHeight(25);
        jTableProfessor.getTableHeader().setReorderingAllowed(false);
        jTableProfessor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProfessorMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableProfessor);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Selecione o PROFESSOR abaixo: ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Selecione o LIVRO abaixo: ");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("EMPRÉSTIMOS: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jRClientes)
                                .addGap(18, 18, 18)
                                .addComponent(jRLivros))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jBPesquisar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRClientes)
                    .addComponent(jRLivros)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTPesquisar))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel11)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel7.setBackground(new java.awt.Color(255, 204, 204));
        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Para fazer um empréstimo clique nas tabelas o aluno e o livro que o mesmo deseja.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.getAccessibleContext().setAccessibleName("Cadastro de Clientes");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
     
    // BOTÃO CADASTRAR - Precionando
    private void jBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrarActionPerformed
        try {  
            cadastraRegistro();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao efetuar empréstimo.");
        }
    }//GEN-LAST:event_jBCadastrarActionPerformed
     
    // BOTÃO PESQUISAR - Precionando
    private void jBPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisarActionPerformed
        // Ao clicar em pesquisar, é executado o método que efetua a pesquisa, e outro método que exibe a lista da pesquisa
        
        if (!(jRClientes.isSelected() || jRLivros.isSelected())) {            
            JOptionPane.showMessageDialog(rootPane, "Selecione um campo de pesquisa.");            
        } else if (jRClientes.isSelected()) {  
            // Quando seleciona PESQUISA CLIENTE
            try {
                listaContatosCliente();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao efetuar empréstimo.");
            }            
        } else if (jRLivros.isSelected()) {
            // Quando seleciona PESQUISA LIVROS
            try {
                listaContatosLivro();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Problemas ao listar contatos.");
            }
        }
        
    }//GEN-LAST:event_jBPesquisarActionPerformed
    
    // TABELA EMPRÉSTIMO - Selecionando registro com o clique do mouse
    private void jTableEmprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmprestimoMouseClicked
        
        int linhaSelecionada = jTableEmprestimo.getSelectedRow();
        
        jT0IdEmprestimo.setText(jTableEmprestimo.getValueAt(linhaSelecionada, 0).toString());
        jT1IdProfessor.setText(jTableEmprestimo.getValueAt(linhaSelecionada, 1).toString());
        jT2IdLivro.setText(jTableEmprestimo.getValueAt(linhaSelecionada, 2).toString());
        jT3DataEmprestimo.setText(jTableEmprestimo.getValueAt(linhaSelecionada, 3).toString());
        jT4DataDevolucao.setText(jTableEmprestimo.getValueAt(linhaSelecionada, 4).toString());
        
        limpaTabelaLivro();
        desabilitaCamposEmprestimo();
        
    }//GEN-LAST:event_jTableEmprestimoMouseClicked
    
   
    // TABELA LIVRO - Selecionando registro com o clique do mouse
    private void jTableLivroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLivroMouseClicked
        // Salva a posição da linha selecionada na tabela de pesquisa
        int linhaSelecionada = jTableLivro.getSelectedRow();
        
        jT2IdLivro.setText(jTableLivro.getValueAt(linhaSelecionada, 0).toString());
        
        // Mostra a data atual como data do empréstimo        
        dataEmprestimo();
        // Mostra a data atual como data do empréstimo        
        mostraDataDevolucao();
    }//GEN-LAST:event_jTableLivroMouseClicked

    // TABELA CLIENTE - Selecionando registro com o clique do mouse
    private void jTableProfessorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProfessorMouseClicked
        // Salva a posição da linha selecionada na tabela de pesquisa
        int linhaSelecionada = jTableProfessor.getSelectedRow();
        
        limpaCamposEmprestimo();   
        jT1IdProfessor.setText(jTableProfessor.getValueAt(linhaSelecionada, 0).toString()); 
        
        try {
            listaContatosEmprestimo();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao listar empréstimos.");
        }
    }//GEN-LAST:event_jTableProfessorMouseClicked
    
    // BOTÃO DEVOLVER
    private void jBDevolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBDevolverMouseClicked
        try {
            devolveLivro();
            limpaCamposEmprestimo();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao devolver livro.");
        } catch (ParseException ex) {
            Logger.getLogger(JFEmprestimoProfessor.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jBDevolverMouseClicked
    
    // FECHANDO A JANELA
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        // Habilita a tabela principal
        telaPrincipal.setEnabled(true);
        
    }//GEN-LAST:event_formWindowClosed

    private void jT3DataEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jT3DataEmprestimoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jT3DataEmprestimoActionPerformed

    private void jBCadastrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrar1ActionPerformed
        limpaCamposEmprestimo();   
        limpaTabelaEmprestimo();
        limpaTabelaCliente();
        limpaTabelaLivro();
        // Mostra a data atual como data do empréstimo        
        dataEmprestimo();
        // Mostra a data atual como data do empréstimo        
        mostraDataDevolucao();
    }//GEN-LAST:event_jBCadastrar1ActionPerformed

    private void jBDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDevolverActionPerformed
        
    }//GEN-LAST:event_jBDevolverActionPerformed

    private void jBSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBSairActionPerformed

    private void jBExcluir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExcluir1ActionPerformed
        try {
            excluirRegistro();
            limpaCamposEmprestimo();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao excluir o empréstimo.");
        }
    }//GEN-LAST:event_jBExcluir1ActionPerformed
    
    
    
    
    /* ----CADASTRO-> */
    // MÉTODOS:
    
    // Método p/ cadastrar um registro no banco de dados.
    private void cadastraRegistro() throws SQLException {
        // Antes de cadastrar, verifica se o usuário está com algum registro selecionado
        if (!(jTableEmprestimo.getSelectedRow() != -1)) {
            // Antes de cadastrar, verifica se os campos foram preenchidos
            if (verificaDados()) {
                if (verificaDisponibilidadeLivro()) {
                    BdEmprestimoProfessor d = new BdEmprestimoProfessor();
                        try {
                            Emprestimo e = new Emprestimo();
                            System.out.println("professor");
                            e.setIdProfessor(Integer.valueOf(jT1IdProfessor.getText()));
                            e.setRegistro(Integer.valueOf(jT2IdLivro.getText()));
                            e.setData_emprestimo(salvaDataEmprestimo());
                            e.setData_devolucao(salvaDataDevolucao());

                            d.adicionaEmprestimo(e);
                            alteraDisponibilidade(false);

                            JOptionPane.showMessageDialog(rootPane, "Empréstimo efetuado com sucesso.");
                            limpaCamposEmprestimo();

                            listaContatosEmprestimo();
                            listaContatosLivro();

                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Erro ao efetuar empréstimo.");
                        }
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Para cadastrar selecione apenas os campos 'Professor' e 'Livro' nas tabelas.\n\n"
                    + "Para fazer um novo empréstimo clique em 'Limpar'.");
        }
    }
    
    // Método p/ validação do formulário
    private boolean verificaDados() {
        
        if ((!jT1IdProfessor.getText().equals("")) && (!jT2IdLivro.getText().equals("")) 
                && (!jT3DataEmprestimo.getText().equals(""))) {
            return true;
        }
        JOptionPane.showMessageDialog(rootPane, "Dados imcompletos. Preencha os campos abaixo selecionando \n"
                + "o 'Professor' e o 'Livro' nas tabelas.");
        return false;
        
    }
    
    // Pega o campo disponibilidade do livro selecionado
    public Boolean disponibilidadeLivro() throws SQLException {
        // Salva a posição da linha selecionada na tabela de pesquisa
        int linhaSelecionada = jTableLivro.getSelectedRow();
        
        BdLivro b = new BdLivro();
        Livro l = new Livro();
        livros = b.verificaDisponibilidade(Integer.valueOf(jT2IdLivro.getText()));
        return livros.get(0).getDisponibilidade();
        
    }
    
    // Método p/ verifica se o livro está disponível
    private boolean verificaDisponibilidadeLivro() throws SQLException {
        
        if (disponibilidadeLivro()==true) {
            return true;
        }else{
        JOptionPane.showMessageDialog(rootPane, "Livro selecionado está indisponível.");
        return false;
        }
        
    }
    
    /* <-CADASTRO---- */ 
    
    
    
    
    /* ----DATAS-> */
    
    // Exibe a data do empréstimo(data atual) no formulário
    
    // Exibe a data do empréstimo(data atual) no formulário
    private void dataEmprestimo() {
        Date data = new Date();  
        
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");  
        String s = formataData.format( data ); 
        
        jT3DataEmprestimo.setText(formataData.format(data));      
    }   
    
    // Retorna a data de empréstimo
    private String salvaDataEmprestimo() {
        Date data = new Date();  
        
        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");  
        String dataEmprestimoFormatada = formataData.format(data); 
        
        return dataEmprestimoFormatada;   
    }  
    
    // Exibe a data de devolução no formulário
    private void mostraDataDevolucao() {        
        // Recebe a data do sistema
        Date dataDevolucao = new Date();
        // Adiciona + 10 à data atual
        dataDevolucao.setDate(dataDevolucao.getDate() + 7);
     
        // Formata a data recebida
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");        
        String dataDevolucaoFormatada = formataData.format(dataDevolucao);
                
        jT4DataDevolucao.setText(dataDevolucaoFormatada);
    }    
    
    // Retorna a data de devolução, pronta p/ ser salva no BD
    public String salvaDataDevolucao() {
        // Recebe a data do sistema
        Date dataDevolucao = new Date();
        // Adiciona + 15 à data atual
        dataDevolucao.setDate(dataDevolucao.getDate() + 15);
        
        // Formata a data recebida
        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");        
        String dataDevolucaoFormatada = formataData.format(dataDevolucao);
        
        return dataDevolucaoFormatada;
    }
    
    // Pega a data de devolução no registro selecionado na tebela de emprestimo
    public String pegaDataDevolucaoTabela() throws ParseException {
        
        int linhaSelecionada = jTableEmprestimo.getSelectedRow();   
        String dataTabela = fomartDateToStringUs((jTableEmprestimo.getValueAt(linhaSelecionada, 4)).toString());
        
        SimpleDateFormat formataData = new SimpleDateFormat ("yyyy-MM-dd"); 
        Date dataDevolucao = new Date();
        
        dataDevolucao = formataData.parse(dataTabela); 
        
        return formataData.format(dataDevolucao);
    }
    
    
    // Calcula a diferença entre a data prevista para devolução e a data atual
    private long diferencaData() throws ParseException {
        LocalDate atual = LocalDate.now();
        LocalDate dataDevolucao = LocalDate.parse(pegaDataDevolucaoTabela());
        
        long diferenca = 0;
        
        if (dataDevolucao.compareTo(atual) < 0) {
            diferenca = ChronoUnit.DAYS.between(dataDevolucao, atual);
        }
        
        return diferenca;       
    }
    
    public String fomartDateToStringUs(String dateOr){
        String dataString = dateOr;
        String[] dataSeparada = dataString.split("/");
        String dataFormatada = dataSeparada[2]+"-"+dataSeparada[1]+"-"+dataSeparada[0];
               
        return dataFormatada;
    }
    /* <-DATAS---- */ 
    
    
    
    
    /* ----PESQUISA-> */
    // MÉTODOS:          
    
    /* ----CLIENTE-> */ 
    // Configura campos da tabela de pesquisas de acordo com os campos do Professor
    DefaultTableModel tmProfessor = new DefaultTableModel(new Object[] {"ID", "Nome", "Curso" }, 0) {
    @Override
    public boolean isCellEditable(int rowIndex, int mColIndex){  
    return false;  
    }
    };
    // Lista de professors, recebe os registros retornados da pesquisa
    List<Professor> professors;  
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosCliente() throws SQLException {        
        BdProfessor d = new BdProfessor();
        professors = d.getLista("%" + jTPesquisar.getText() + "%"); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaCliente(professors);
        professors.clear();
    }
    
    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaCliente(List<Professor> professors) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaCliente();
        
        if (professors.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum professor encontrado.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null};
            // P/ cada registro é criada uma nova linha, cada recebe linha os campos do registro
            for (int i = 0; i < professors.size(); i++) {
                tmProfessor.addRow(linha);
                tmProfessor.setValueAt(professors.get(i).getIdProfessor(), i, 0);
                tmProfessor.setValueAt(professors.get(i).getNomeProfessor(), i, 1);
                tmProfessor.setValueAt(professors.get(i).getDisciplina(), i, 2);              
            }            
        }
    }   
    
    // Limpa a tabela de resultados
    private void limpaTabelaCliente() {       
        while (tmProfessor.getRowCount() > 0) {            
            tmProfessor.removeRow(0);
        }
    } 
    /*<-CLIENTE----*/
    
    
    /*----EMPRÉSTIMO->*/    
    // Configura campos da tabela de pesquisas de acordo com os campos dos Empréstimos
    DefaultTableModel tmEmprestimo = new DefaultTableModel(new Object[] {"ID", "ID do professor", "Registro do livro", "Data Empréstimo", "Data Devolução" }, 0) {
    @Override
    public boolean isCellEditable(int rowIndex, int mColIndex){  
    return false;  
    }
    };
    // Lista de empréstimos, recebe os registros retornados da pesquisa
    List<Emprestimo> emprestimos;
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosEmprestimo() throws SQLException { 
        BdEmprestimoProfessor d = new BdEmprestimoProfessor();
        emprestimos = d.getListaPorCliente(pegaIdProfessor()); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaEmprestimo(emprestimos);
        emprestimos.clear();
    }
    
    
    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaEmprestimo(List<Emprestimo> emprestimos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaEmprestimo();
        
        if (emprestimos.isEmpty()) {
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < emprestimos.size(); i++) {
                tmEmprestimo.addRow(linha);
                tmEmprestimo.setValueAt(emprestimos.get(i).getId_emprestimo(), i, 0);
                tmEmprestimo.setValueAt(emprestimos.get(i).getIdProfessor(), i, 1);
                tmEmprestimo.setValueAt(emprestimos.get(i).getRegistro(), i, 2);
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_emprestimo()), i, 3);         
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_devolucao()), i, 4);         
            }            
        }
    }
    
    //Pega a data da tabala em converte em String com formato dd/MM/yyyy(pt/br)
    public String fomartDateToStringPt(String dateOr){
        String dataString = dateOr;
        String[] dataSeparada = dataString.split("-");
        String dataFormatada = dataSeparada[2]+"/"+dataSeparada[1]+"/"+dataSeparada[0];
               
        return dataFormatada;
    }
    
    // Limpa a tabela de resultados
    private void limpaTabelaEmprestimo() {       
        while (tmEmprestimo.getRowCount() > 0) {            
            tmEmprestimo.removeRow(0);
        }
    } 
    /*<-EMPRESTIMO----*/    
    
   
    /* ----LIVRO-> */    
    // Edita os campos e colunas da tabela de resultados
  
    DefaultTableModel tmLivro = new DefaultTableModel(new Object[] {"Registro", "Título", "Autor", "Disponibilidade" }, 0) {
    @Override
    public boolean isCellEditable(int rowIndex, int mColIndex){  
    return false;  
    }
    };
    List<Livro> livros;
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosLivro() throws SQLException {
        BdLivro d = new BdLivro();
        livros = d.getLista("%" + jTPesquisar.getText() + "%"); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaLivro(livros);
        livros.clear();
    }
    
    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaLivro(List<Livro> livros) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaLivro();
        
        if (livros.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum livro encontrado.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < livros.size(); i++) {
                tmLivro.addRow(linha);
                tmLivro.setValueAt(livros.get(i).getRegistro(), i, 0);
                tmLivro.setValueAt(livros.get(i).getTitulo(), i, 1);
                tmLivro.setValueAt(livros.get(i).getAutor(), i, 2);
                System.out.println(livros.get(i).getDisponibilidade());
                if((livros.get(i).getDisponibilidade())==false){
                    tmLivro.setValueAt("Indisponível", i, 3);    
                }else{               
                    tmLivro.setValueAt("Disponível", i, 3);
                }    
            }            
        }
    }
    
    // Limpa a tabela de resultados
    private void limpaTabelaLivro() {       
        while (tmLivro.getRowCount() > 0) {            
            tmLivro.removeRow(0);
        }
    }
    /* <-LIVRO---- */  
        
    /* <-PESQUISA---- */      
    
    
    
    
    /* ----EXCLUIR-> */
    // MÉTODOS:
    
    // Exclui resgistro
    private void excluirRegistro() throws SQLException {
        // Se algum registro estiver selecionado
        if (jTableEmprestimo.getSelectedRow() != -1) {
            // Exibe uma janela de confirmação antes de exluir o registro
            int resp = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir este Empréstimo?",
                    "Confirmação!", JOptionPane.YES_NO_OPTION);

            // Se a confirmação for SIM
            if (resp == JOptionPane.YES_NO_OPTION) {
                // Recebe a linha selecionada
                int linhaSelecionada = jTableEmprestimo.getSelectedRow();
                // Recebe o ID da linha selecionada
                int id = (int) jTableEmprestimo.getValueAt(linhaSelecionada, 0);
                // Remove o registro, usando como parâmetro, o id da linha selecionada                
                BdEmprestimoProfessor d = new BdEmprestimoProfessor();
                d.remove(id);

                JOptionPane.showMessageDialog(rootPane, "Empréstimo excluido com sucesso.");
                alteraDisponibilidade(true);
                
                listaContatosEmprestimo();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Empréstimo não selecionado. Selecione o emprestimo clicando na tabela.");
        }
    }
    /* <-EXCLUIR---- */
    
    
    
    
    /* ----ALTERAR-> */
    // MÉTODOS:
        
    // Altera a disponibilidade do livro
    private void alteraDisponibilidade(boolean tr) throws SQLException {
        if ((jTableProfessor.getSelectedRow() != -1) || (jTableLivro.getSelectedRow() != -1)) {  
                Livro l = new Livro();
                BdLivro d = new BdLivro();             
                
                // Recebe o id do livro, que está sendo exibido no formulário
                l.setRegistro(Integer.valueOf(pegaIdLivro()));
                l.setDisponibilidade(tr);
                       
                d.alteraDisponibilidadeLivro(l);           
        } else {
            JOptionPane.showMessageDialog(rootPane, "Livro não selecionado.");
        }
    }
    
    // Pega o ID do livro referente ao empréstimo selecionado na tabela de pesquisa
    private String pegaIdLivro() {
        int linhaSelecionada;
        String s = "0";
        if (jTableEmprestimo.getSelectedRow() != -1) {
            linhaSelecionada = jTableEmprestimo.getSelectedRow();
            s = jTableEmprestimo.getValueAt(linhaSelecionada, 2).toString();
        } else if (jTableLivro.getSelectedRow() != -1) {
            linhaSelecionada = jTableLivro.getSelectedRow();
            s = jTableLivro.getValueAt(linhaSelecionada, 0).toString();
        }

        return s;
    }
    /* <-ALTERAR---- */
    
    
    
    
    /* ----DEVOLVER-> */
    private void devolveLivro() throws SQLException, ParseException {
        
        if (jTableEmprestimo.getSelectedRow() != -1) {
            
            // Altera a disponibilidade do livro
            alteraDisponibilidade(true);          
            
            // Exclui o registo de empréstimo
            // Recebe a linha selecionada
            int linhaSelecionada = jTableEmprestimo.getSelectedRow();
            // Recebe o ID da linha selecionada
            int id = (int) jTableEmprestimo.getValueAt(linhaSelecionada, 0);
            // Remove o registro, usando como parâmetro, o id da linha selecionada                
            BdEmprestimoProfessor d = new BdEmprestimoProfessor();
            d.remove(id);         
            
            if (diferencaData() > 0) {
                JOptionPane.showMessageDialog(rootPane, "Livro devolvido após o prazo de vencimento do emprestimo.\n"
                        + "Passou " + diferencaData() + " DIAS!");
                        
                listaContatosEmprestimo();
                listaContatosLivro();    
            } else {
                JOptionPane.showMessageDialog(rootPane, "Empréstimo devolvido com sucesso.");
                listaContatosEmprestimo();
                listaContatosLivro();                
            }           
            
        } else {
            JOptionPane.showMessageDialog(rootPane, "Empréstimo não selecionado, selecione o empréstimo na tabela.");
        }
        
    }
    /* <-DEVOLVER---- */
    
    
    
    
    /* ----OUTROS-> */
    // MÉTODOS:
    
    // Limpa os campos do formulário
    private void limpaCamposEmprestimo() {
        jT0IdEmprestimo.setText("");
        jT1IdProfessor.setText("");
        jT2IdLivro.setText("");
    }
    
    // Desabilita os campos do formulário
    private void desabilitaCamposEmprestimo() {
        jT0IdEmprestimo.setEditable(false);
        jT1IdProfessor.setEditable(false);
        jT2IdLivro.setEditable(false);
        jT3DataEmprestimo.setEditable(false);
        jT4DataDevolucao.setEditable(false);
    }    
    

    
    /* <-OUTROS---- */
    private String pegaIdProfessor() throws SQLException {
        int linhaSelecionada = jTableProfessor.getSelectedRow();
                        
        String s = jTableProfessor.getValueAt(linhaSelecionada, 0).toString();  
        
        return s;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFEmprestimoProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFEmprestimoProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFEmprestimoProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFEmprestimoProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFEmprestimoProfessor().setVisible(true);
            }
        });
    }    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bGPesquisa;
    private javax.swing.JButton jBCadastrar;
    private javax.swing.JButton jBCadastrar1;
    private javax.swing.JButton jBDevolver;
    private javax.swing.JButton jBExcluir1;
    private javax.swing.JButton jBPesquisar;
    private javax.swing.JButton jBSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRClientes;
    private javax.swing.JRadioButton jRLivros;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jT0IdEmprestimo;
    private javax.swing.JTextField jT1IdProfessor;
    private javax.swing.JTextField jT2IdLivro;
    private javax.swing.JTextField jT3DataEmprestimo;
    private javax.swing.JTextField jT4DataDevolucao;
    private javax.swing.JTextField jTPesquisar;
    private javax.swing.JTable jTableEmprestimo;
    private javax.swing.JTable jTableLivro;
    public javax.swing.JTable jTableProfessor;
    // End of variables declaration//GEN-END:variables

}
