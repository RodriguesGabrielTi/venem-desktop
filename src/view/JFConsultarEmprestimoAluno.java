/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.BdAluno;
import utils.BdEmprestimoAluno;
import utils.BdLivro;
import model.Aluno;
import model.Emprestimo;
import model.Livro;
import model.Professor;
import utils.BdEmprestimoProfessor;


/**
 *
 * @author paulojp
 */
public class JFConsultarEmprestimoAluno extends javax.swing.JFrame {  
   
    private JFPrincipal telaPrincipal;
    boolean verifica = false;
    
    /**
     * Creates new form Aluno
     */
    public JFConsultarEmprestimoAluno() {
        initComponents();
        verifica = true;
        // Desabilita os campos ao iniciar a janela
        try {
            listaContatosEmprestimoCompleta();
            limpaTabelaCliente();
            limpaTabelaLivro();
        } catch (SQLException ex) {
            Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Construtor que recebe a instância da tela principal
    JFConsultarEmprestimoAluno(JFPrincipal telaPrincipal) {
        
        this();
        this.telaPrincipal = telaPrincipal;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGPesquisa = new javax.swing.ButtonGroup();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jTPesquisar = new javax.swing.JTextField();
        jBPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmprestimo = new javax.swing.JTable();
        jRClientes = new javax.swing.JRadioButton();
        jRLivros = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableLivro = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableAluno = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jBSair = new javax.swing.JButton();
        jBSair1 = new javax.swing.JButton();
        jBSair2 = new javax.swing.JButton();
        jBSair3 = new javax.swing.JButton();
        jBSair4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta de empréstimos alunos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Consultar empréstimos"));

        jTPesquisar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jBPesquisar.setBackground(new java.awt.Color(0, 153, 0));
        jBPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconfinder_search_322497 (1).png"))); // NOI18N
        jBPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisarActionPerformed(evt);
            }
        });

        jTableEmprestimo.setBackground(new java.awt.Color(204, 255, 204));
        jTableEmprestimo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTableEmprestimo.setModel(tmEmprestimo);
        jTableEmprestimo.setRowHeight(25);
        jTableEmprestimo.getTableHeader().setReorderingAllowed(false);
        jTableEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmprestimoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmprestimo);

        jRClientes.setBackground(new java.awt.Color(255, 255, 255));
        bGPesquisa.add(jRClientes);
        jRClientes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRClientes.setText("Alunos");

        jRLivros.setBackground(new java.awt.Color(255, 255, 255));
        bGPesquisa.add(jRLivros);
        jRLivros.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRLivros.setText("Livros");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Pesquisar por: ");

        jTableLivro.setAutoCreateRowSorter(true);
        jTableLivro.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTableLivro.setModel(tmLivro);
        jTableLivro.setRowHeight(25);
        jTableLivro.getTableHeader().setReorderingAllowed(false);
        jTableLivro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLivroMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTableLivroMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(jTableLivro);

        jTableAluno.setFont(new java.awt.Font("Tahoma", 0, 18));
        jTableAluno.setModel(tmAluno);
        jTableAluno.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableAluno.setRowHeight(25);
        jTableAluno.getTableHeader().setReorderingAllowed(false);
        jTableAluno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAlunoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTableAlunoMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(jTableAluno);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("ALUNO: ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("LIVRO: ");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("EMPRÉSTIMOS: ");

        jBSair.setBackground(new java.awt.Color(255, 0, 0));
        jBSair.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jBSair.setForeground(new java.awt.Color(255, 255, 255));
        jBSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/sair-menu.png"))); // NOI18N
        jBSair.setText("SAIR");
        jBSair.setBorderPainted(false);
        jBSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSairActionPerformed(evt);
            }
        });

        jBSair1.setBackground(new java.awt.Color(0, 153, 0));
        jBSair1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBSair1.setForeground(new java.awt.Color(255, 255, 255));
        jBSair1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconfinder_icon-70-document-file-pdf_315274.png"))); // NOI18N
        jBSair1.setText("PDF DE TODOS OS EMPRÉSTIMOS");
        jBSair1.setBorderPainted(false);
        jBSair1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSair1ActionPerformed(evt);
            }
        });

        jBSair2.setBackground(new java.awt.Color(0, 153, 0));
        jBSair2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBSair2.setForeground(new java.awt.Color(255, 255, 255));
        jBSair2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconfinder_icon-70-document-file-pdf_315274.png"))); // NOI18N
        jBSair2.setText("PDF DOS EMPRÉSTIMOS ATRASADOS");
        jBSair2.setBorderPainted(false);
        jBSair2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSair2ActionPerformed(evt);
            }
        });

        jBSair3.setBackground(new java.awt.Color(0, 153, 0));
        jBSair3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBSair3.setForeground(new java.awt.Color(255, 255, 255));
        jBSair3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconfinder_search_322497 (1).png"))); // NOI18N
        jBSair3.setText("EMPRÉSTIMOS ATRASADOS");
        jBSair3.setBorderPainted(false);
        jBSair3.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jBSair3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSair3ActionPerformed(evt);
            }
        });

        jBSair4.setBackground(new java.awt.Color(0, 153, 0));
        jBSair4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBSair4.setForeground(new java.awt.Color(255, 255, 255));
        jBSair4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/imagens/iconfinder_search_322497 (1).png"))); // NOI18N
        jBSair4.setText("TODOS EMPRÉSTIMOS");
        jBSair4.setBorderPainted(false);
        jBSair4.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jBSair4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSair4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Selecione o empréstimo para visualizar o aluno e o livro que está emprestado nas tabelas abaixo.");

        jLabel2.setText("Selecione o aluno para visualizar os dados do seu empréstimo na tabela de empréstimos.");

        jLabel3.setText("Selecione o livro para visualizar os dados do seu empréstimo na tabela de empréstimos.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jBSair1)
                        .addGap(18, 18, 18)
                        .addComponent(jBSair2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBSair))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jBPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                        .addComponent(jBSair3)
                        .addGap(18, 18, 18)
                        .addComponent(jBSair4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jRClientes)
                        .addGap(18, 18, 18)
                        .addComponent(jRLivros)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRClientes)
                    .addComponent(jRLivros)
                    .addComponent(jLabel6))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTPesquisar)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBSair4)
                        .addComponent(jBSair3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSair)
                    .addComponent(jBSair1)
                    .addComponent(jBSair2))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
     
    
    // BOTÃO PESQUISAR - Precionando
    private void jBPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisarActionPerformed
        // Ao clicar em pesquisar, é executado o método que efetua a pesquisa, e outro método que exibe a lista da pesquisa
        
        if (!(jRClientes.isSelected() || jRLivros.isSelected())) {            
            JOptionPane.showMessageDialog(rootPane, "Selecione um campo de pesquisa.");            
        } else if (jRClientes.isSelected()) {  
            // Quando seleciona PESQUISA CLIENTE
            try {
                listaContatosCliente();
                limpaTabelaLivro();
                limpaTabelaEmprestimo();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao efetuar empréstimo.");
            }            
        } else if (jRLivros.isSelected()) {
            // Quando seleciona PESQUISA LIVROS
            try {
                listaContatosLivro();
                limpaTabelaCliente();
                limpaTabelaEmprestimo();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Problemas ao listar contatos.");
            }
        }
        
    }//GEN-LAST:event_jBPesquisarActionPerformed
    
    // TABELA EMPRÉSTIMO - Selecionando registro com o clique do mouse
    private void jTableEmprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmprestimoMouseClicked
              
        limpaTabelaLivro();
        limpaTabelaCliente();
        
        try {
            listaContatosAlunoEmprestimo();
            listaContatosLivroEmprestimo();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao listar aluno e livro.");
        }
        
    }//GEN-LAST:event_jTableEmprestimoMouseClicked
    
   
    // TABELA LIVRO - Selecionando registro com o clique do mouse
    private void jTableLivroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLivroMouseClicked
        // Salva a posição da linha selecionada na tabela de pesquisa
        int linhaSelecionada = jTableLivro.getSelectedRow();
        
        try {
            limpaTabelaEmprestimo();
            listaContatosEmprestimoLivro();
            limpaTabelaCliente();           
        } catch (SQLException ex) {
            Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(Level.SEVERE, null, ex);
        }
          
    }//GEN-LAST:event_jTableLivroMouseClicked

    // TABELA CLIENTE - Selecionando registro com o clique do mouse
    private void jTableAlunoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlunoMouseClicked
        // Salva a posição da linha selecionada na tabela de pesquisa
        int linhaSelecionada = jTableAluno.getSelectedRow(); 
        
        try {
            listaContatosEmprestimoAluno();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao listar empréstimos.");
        }
        
    }//GEN-LAST:event_jTableAlunoMouseClicked
    
   
    // FECHANDO A JANELA
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        // Habilita a tabela principal
        telaPrincipal.setEnabled(true);
        
    }//GEN-LAST:event_formWindowClosed

    private void jBSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBSairActionPerformed

    private void jBSair1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSair1ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Função indisponível");
    }//GEN-LAST:event_jBSair1ActionPerformed

    private void jBSair2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSair2ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Função indisponível");
    }//GEN-LAST:event_jBSair2ActionPerformed

    private void jBSair3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSair3ActionPerformed
        try {
            listaContatosEmprestimoAtrasado();
            limpaTabelaCliente();
            limpaTabelaLivro();
        } catch (SQLException ex) {
            Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBSair3ActionPerformed

    private void jBSair4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSair4ActionPerformed
        try {
            listaContatosEmprestimoCompleta();
            limpaTabelaCliente();
            limpaTabelaLivro();
        } catch (SQLException ex) {
            Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBSair4ActionPerformed

    private void jTableAlunoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAlunoMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableAlunoMouseEntered

    private void jTableLivroMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLivroMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableLivroMouseEntered
    
    
    
    
    
    
    
      
    /* ----PESQUISA-> */
    // MÉTODOS:          
    
    /* ----CLIENTE-> */ 
    // Configura campos da tabela de pesquisas de acordo com os campos do Aluno
    DefaultTableModel tmAluno = new DefaultTableModel(new Object[] {"Matrícula", "Nome", "Série", "Curso" }, 0) {
    @Override
    public boolean isCellEditable(int rowIndex, int mColIndex){  
    return false;  
    }
    };
    // Lista de alunos, recebe os registros retornados da pesquisa
    List<Aluno> alunos;  
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosCliente() throws SQLException {        
        BdAluno d = new BdAluno();
        alunos = d.getLista("%" + jTPesquisar.getText() + "%"); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaCliente(alunos);
        alunos.clear();
    }
    
    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaCliente(List<Aluno> alunos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaCliente();
        
        if (alunos.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum aluno encontrado.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null};
            // P/ cada registro é criada uma nova linha, cada recebe linha os campos do registro
            for (int i = 0; i < alunos.size(); i++) {
                tmAluno.addRow(linha);
                tmAluno.setValueAt(alunos.get(i).getMatricula(), i, 0);
                tmAluno.setValueAt(alunos.get(i).getNomeAluno(), i, 1);
                tmAluno.setValueAt(alunos.get(i).getSerie()+"º", i, 2);
                tmAluno.setValueAt(alunos.get(i).getCurso(), i, 3);              
            }            
        }
    }   
    
    // Pega a matricula da tabela de emprestimo e lista o aluno
    private void listaContatosAlunoEmprestimo() throws SQLException { 
        BdAluno d = new BdAluno();
        alunos = d.getListaMatricula(pegaMatriculaDoEmprestimo()); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraContatoAlunoEmprestimo(alunos);
        alunos.clear();
    }
    
    // Mostra o resultado do aluno a partir da matricula da tabela de empréstimos
    private void mostraContatoAlunoEmprestimo(List<Aluno> alunos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaCliente();
        
        if (alunos.isEmpty()) {
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < alunos.size(); i++) {
                tmAluno.addRow(linha);
                tmAluno.setValueAt(alunos.get(i).getMatricula(), i, 0);
                tmAluno.setValueAt(alunos.get(i).getNomeAluno(), i, 1);
                tmAluno.setValueAt(alunos.get(i).getSerie()+"º", i, 2);
                tmAluno.setValueAt(alunos.get(i).getCurso(), i, 3);  
            }            
        }
    }
    
    // Limpa a tabela de resultados
    private void limpaTabelaCliente() {       
        while (tmAluno.getRowCount() > 0) {            
            tmAluno.removeRow(0);
        }
    } 
    
    /*<-CLIENTE----*/
    
    
    /*----EMPRÉSTIMO->*/    
    // Configura campos da tabela de pesquisas de acordo com os campos dos Empréstimos
    DefaultTableModel tmEmprestimo = new DefaultTableModel(new Object[] {"ID", "Matrícula do aluno", "Registro do livro", "Data Empréstimo", "Data Devolução" }, 0) {
    @Override
    public boolean isCellEditable(int rowIndex, int mColIndex){  
    return false;  
    }
    };
    // Lista de empréstimos, recebe os registros retornados da pesquisa
    List<Emprestimo> emprestimos;
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosEmprestimoAluno() throws SQLException { 
        BdEmprestimoAluno d = new BdEmprestimoAluno();
        emprestimos = d.getListaPorCliente(pegaMatricula()); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaEmprestimo(emprestimos);
        emprestimos.clear();
    }
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosEmprestimoLivro() throws SQLException { 
        BdEmprestimoAluno d = new BdEmprestimoAluno();
        emprestimos = d.getListaPorLivro(pegaIdLivro()); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaEmprestimoLivro(emprestimos);
        emprestimos.clear();
    }
    
    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaEmprestimoLivro(List<Emprestimo> emprestimos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaEmprestimo();
        
        if (emprestimos.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "O livro selecionado está emprestado á um professor, para verificar os dados do empréstimo\n"+
                    "deste livro acesse no menu 'Empréstimos>Consultar empréstimos professores'.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < emprestimos.size(); i++) {
                tmEmprestimo.addRow(linha);
                tmEmprestimo.setValueAt(emprestimos.get(i).getId_emprestimo(), i, 0);
                tmEmprestimo.setValueAt(emprestimos.get(i).getMatricula(), i, 1);
                tmEmprestimo.setValueAt(emprestimos.get(i).getRegistro(), i, 2);
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_emprestimo()), i, 3);         
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_devolucao()), i, 4);         
            }            
        }
    }
    
    // Lista todos os empréstimos
    private void listaContatosEmprestimoCompleta() throws SQLException { 
        BdEmprestimoAluno d = new BdEmprestimoAluno();
        emprestimos = d.getListaCompleta(); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaEmprestimo(emprestimos);
        emprestimos.clear();
    }
    
    // Move para a tabela os resultados da consulta
    private void mostraPesquisaEmprestimo(List<Emprestimo> emprestimos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaEmprestimo();
        
        if (emprestimos.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum empréstimo existente");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < emprestimos.size(); i++) {
                tmEmprestimo.addRow(linha);
                tmEmprestimo.setValueAt(emprestimos.get(i).getId_emprestimo(), i, 0);
                tmEmprestimo.setValueAt(emprestimos.get(i).getMatricula(), i, 1);
                tmEmprestimo.setValueAt(emprestimos.get(i).getRegistro(), i, 2);
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_emprestimo()), i, 3);         
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_devolucao()), i, 4);         
            }            
        }
    }  
    
    // Lista a quantidade de empréstimos vencidos
    private void listaContatosEmprestimoAtrasado() throws SQLException { 
        BdEmprestimoAluno d = new BdEmprestimoAluno();
        emprestimos = d.getListaAtrasado(); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaEmprestimoAtrasado(emprestimos);
        emprestimos.clear();
    }
    
    // Move para a tabela os resultados da consulta
    private void mostraPesquisaEmprestimoAtrasado(List<Emprestimo> emprestimos) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaEmprestimo();
        
        if (emprestimos.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum empréstimo atrasado existente.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < emprestimos.size(); i++) {
                tmEmprestimo.addRow(linha);
                tmEmprestimo.setValueAt(emprestimos.get(i).getId_emprestimo(), i, 0);
                tmEmprestimo.setValueAt(emprestimos.get(i).getMatricula(), i, 1);
                tmEmprestimo.setValueAt(emprestimos.get(i).getRegistro(), i, 2);
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_emprestimo()), i, 3);         
                tmEmprestimo.setValueAt(fomartDateToStringPt(emprestimos.get(i).getData_devolucao()), i, 4);         
            }            
        }
    } 
    
    //Pega a data da tabala em converte em String com formato dd/MM/yyyy(pt/br)
    public String fomartDateToStringPt(String dateOr){
        String dataString = dateOr;
        String[] dataSeparada = dataString.split("-");
        String dataFormatada = dataSeparada[2]+"/"+dataSeparada[1]+"/"+dataSeparada[0];
               
        return dataFormatada;
    }
    
    // Limpa a tabela de resultados
    private void limpaTabelaEmprestimo() {       
        while (tmEmprestimo.getRowCount() > 0) {            
            tmEmprestimo.removeRow(0);
        }
    } 
    /*<-EMPRESTIMO----*/    
    
   
    /* ----LIVRO-> */    
    // Edita os campos e colunas da tabela de resultados
  
    DefaultTableModel tmLivro = new DefaultTableModel(new Object[] {"Registro", "Título", "Autor", "Disponibilidade" }, 0) {
    @Override
    public boolean isCellEditable(int rowIndex, int mColIndex){  
    return false;  
    }
    };
    List<Livro> livros;
    
    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosLivro() throws SQLException {
        BdLivro d = new BdLivro();
        livros = d.getListaEmprestados("%" + jTPesquisar.getText() + "%"); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaLivroEmprestados(livros);
        livros.clear();
    }
    
    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaLivroEmprestados(List<Livro> livros) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaLivro();
        
        if (livros.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nenhum livro emprestado encontrado.");
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < livros.size(); i++) {
                tmLivro.addRow(linha);
                tmLivro.setValueAt(livros.get(i).getRegistro(), i, 0);
                tmLivro.setValueAt(livros.get(i).getTitulo(), i, 1);
                tmLivro.setValueAt(livros.get(i).getAutor(), i, 2);
                System.out.println(livros.get(i).getDisponibilidade());
                if((livros.get(i).getDisponibilidade())==false){
                    tmLivro.setValueAt("Indisponível", i, 3);    
                }else{               
                    tmLivro.setValueAt("Disponível", i, 3);
                }    
            }            
        }
    }
    
    // Pega o registro da tabela de emprestimo e lista o livro
    private void listaContatosLivroEmprestimo() throws SQLException { 
        BdLivro d = new BdLivro();
        livros = d.select(pegaIdLivro()); 
        
        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraContatoLivroEmprestimo(livros);
        livros.clear();
    }
    
    // Mostra o resultado do livro a partir do registro da tabela de empréstimos
    private void mostraContatoLivroEmprestimo(List<Livro> livro) {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaLivro();
        
        if (livros.isEmpty()) {
        } else {            
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[] {null, null, null, null, null};
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < livros.size(); i++) {
                tmLivro.addRow(linha);
                tmLivro.setValueAt(livros.get(i).getRegistro(), i, 0);
                tmLivro.setValueAt(livros.get(i).getTitulo(), i, 1);
                tmLivro.setValueAt(livros.get(i).getAutor(), i, 2);
                if(livros.get(i).getDisponibilidade()==false){
                    tmLivro.setValueAt("Indisponível", i, 3);
                }else{
                    tmLivro.setValueAt("Disponível", i, 3);
                }
            }            
        }
    }
    
    // Limpa a tabela de resultados
    private void limpaTabelaLivro() {       
        while (tmLivro.getRowCount() > 0) {            
            tmLivro.removeRow(0);
        }
    }
    /* <-LIVRO---- */  
        
    /* <-PESQUISA---- */         
    
    /* ----ALTERAR-> */
    // MÉTODOS:
    // Pega o ID do livro referente ao empréstimo selecionado na tabela de pesquisa
    
    private int pegaIdLivro() {
        int linhaSelecionada;
        String s = "0";
        if (jTableEmprestimo.getSelectedRow() != -1) {
            linhaSelecionada = jTableEmprestimo.getSelectedRow();
            s = jTableEmprestimo.getValueAt(linhaSelecionada, 2).toString();
        } else if (jTableLivro.getSelectedRow() != -1) {
            linhaSelecionada = jTableLivro.getSelectedRow();
            s = jTableLivro.getValueAt(linhaSelecionada, 0).toString();
        }

        return Integer.valueOf(s);
    }
    /* <-ALTERAR---- */
     
    
    /* <-OUTROS---- */
    private String pegaMatricula() throws SQLException {
        int linhaSelecionada = jTableAluno.getSelectedRow();
                        
        String s = jTableAluno.getValueAt(linhaSelecionada, 0).toString();  
        
        return s;
    }
    
    private int pegaMatriculaDoEmprestimo() throws SQLException {
        int linhaSelecionada = jTableEmprestimo.getSelectedRow();
                        
        int s = Integer.valueOf(jTableEmprestimo.getValueAt(linhaSelecionada, 1).toString());  
        
        return s;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFConsultarEmprestimoAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFConsultarEmprestimoAluno().setVisible(true);
            }
        });
    }    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bGPesquisa;
    private javax.swing.JButton jBPesquisar;
    private javax.swing.JButton jBSair;
    private javax.swing.JButton jBSair1;
    private javax.swing.JButton jBSair2;
    private javax.swing.JButton jBSair3;
    private javax.swing.JButton jBSair4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRClientes;
    private javax.swing.JRadioButton jRLivros;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTPesquisar;
    public javax.swing.JTable jTableAluno;
    private javax.swing.JTable jTableEmprestimo;
    private javax.swing.JTable jTableLivro;
    // End of variables declaration//GEN-END:variables

}
